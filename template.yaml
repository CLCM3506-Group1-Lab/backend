AWSTemplateFormatVersion: 2010-09-09
Description: >-
  CloudLearnHub

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
    Default: CloudLearnHub
    Description: 'The name of the resources'
  GroupName:
    Type: String
    Default: Group1
    Description: 'The name of the group'
  Local:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: 'Run the Lambda functions locally'

Globals:
  HttpApi:
    Tags:
      ProjectName: !Ref ProjectName
      GroupName: !Ref GroupName

  Function:
    Timeout: 5
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        UsersTable: !Ref UsersTable
        CoursesTable: !Ref CoursesTable
        PurchasesTable: !Ref PurchasesTable
        LOCAL: !Ref Local
    Tags:
      ProjectName: !Ref ProjectName
      GroupName: !Ref GroupName
    Layers:
      - !Ref LambdaLayer

Resources:
  # create LambdaAuthInvokeRole
  LambdaAuthInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokeAuthPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt MyAuthFunction.Arn

  ApiGatewayApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "http://localhost:5173"
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
      FailOnWarnings: true
      Auth:
        Authorizers:
          MyLambdaAuthorizer:
            AuthorizerPayloadFormatVersion: '2.0'
            FunctionArn: !GetAtt MyAuthFunction.Arn
            FunctionInvokeRole: !GetAtt LambdaAuthInvokeRole.Arn
            Identity:
              Headers:
                - Authorization

  MyAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/auth/
      Handler: index.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: myLayer
      Description: Nodejs custom layer
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs16.x
        - nodejs18.x
        - nodejs20.x

  Signup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: signup.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /signup
            Method: POST

  Signin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: signin.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /signin
            Method: POST

  GetProfile:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: get-profile.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /profile
            Method: GET
            Auth:
              Authorizer: MyLambdaAuthorizer

  UpdateProfile:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/users/
      Handler: update-profile.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /profile
            Method: PUT
            Auth:
              Authorizer: MyLambdaAuthorizer

  GetCourses:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/courses/
      Handler: get.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoursesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /courses
            Method: GET


  GetCourseById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/courses/
      Handler: get-by-id.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoursesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /courses/{id}
            Method: GET

  PostCourse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/handlers/courses/
      Handler: post.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CoursesTable
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref ApiGatewayApi
            Path: /courses
            Method: POST
            Auth:
              Authorizer: MyLambdaAuthorizer

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  CoursesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  PurchasesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
